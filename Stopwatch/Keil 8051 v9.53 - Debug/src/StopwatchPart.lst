C51 COMPILER V9.53.0.0   STOPWATCHPART                                                     04/24/2017 18:05:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE STOPWATCHPART
OBJECT MODULE PLACED IN .\src\StopwatchPart.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\student
                    -\SimplicityStudio\v4_workspace\Stopwatch\src\StopwatchPart.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FL
                    -OATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\student\SimplicityStudio\v4_w
                    -orkspace\Stopwatch\inc;C:\Users\student\SimplicityStudio\v4_workspace\Stopwatch\inc\config;C:\Users\student\SimplicitySt
                    -udio\v4_workspace\Stopwatch\inc\graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/p
                    -eripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/Simpl
                    -icityStudio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/s
                    -dks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//
                    -kits/common/drivers/efm8_memory_lcd/inc/graphics;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/com
                    -mon/drivers/efm8_memory_lcd/inc/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/driver
                    -s/efm8_joystick;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/S
                    -implicityStudio/v4/developer/sdks/8051/v4.0.3//Device/EFM8BB3/inc) PRINT(.\src\StopwatchPart.lst) COND PAGEWIDTH(120) PA
                    -GELENGTH(65) OBJECT(.\src\StopwatchPart.OBJ)

line level    source

   1          #include "bsp.h"
   2          #include "tick.h"
   3          #include "disp.h"
   4          #include "render.h"
   5          #include "voltmeter.h"
   6          #include "joystick.h"
   7          #include "adc.h"
   8          #include "thinfont.h"
   9          #include "InitDevice.h"
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          
  12          #define SYSCLK 3062000 //Configurator set for HFOSC0/8
  13          #define LED_TOGGLE_RATE 800 //timer0 set to approx. 100ms
  14          
  15          SI_SBIT(BTN0, SFR_P0, 2);                 // P0.2 BTN0
  16          SI_SBIT(BTN1, SFR_P0, 3);                 // P0.3 BTN1
  17          // Generic line buffer
  18          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  19          SI_SEGMENT_VARIABLE(String[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  20          
  21          uint16_t time;
  22          char timeStr[9];
  23          uint16_t Laps[9];
  24          uint8_t lapnum;
  25          uint8_t current;
  26          uint8_t start;
  27          
  28          //sets global variables
  29          void initGlobals(void)
  30          {
  31   1              time = 0;
  32   1              lapnum = 0;
  33   1              current = 0;
  34   1              start = 0;
  35   1      }
  36          
  37          //BTN0 interrupt
  38          SI_INTERRUPT (INT0_ISR, INT0_IRQn)
  39          {
  40   1              if(BTN0 == 0){
  41   2                      IE_ET0 = !IE_ET0; //toggle
  42   2                      start = !start; //if start == 1, startup lights should go on next BTN0 press
  43   2              }
  44   1              IE_EX0 = 0; //TURN OFF EXTERNAL0 INTERRUPTS (SO THAT MULTIPLE BTN0 PRESSES ARE NOT REGISTERED)
C51 COMPILER V9.53.0.0   STOPWATCHPART                                                     04/24/2017 18:05:38 PAGE 2   

  45   1      }
  46          
  47          //BTN1 interrupt
  48          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
  49          {
  50   1              if(BTN1 == 0){
  51   2                      lapnum++;
  52   2              }
  53   1              IE_EX1 = 0;
  54   1      }
  55          
  56          //time increases by 1 every time LED_TOGGLE RATE is reached
  57          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
  58          {
  59   1         static uint16_t counter = 0;
  60   1      
  61   1         counter++;
  62   1      
  63   1         if(counter == LED_TOGGLE_RATE)
  64   1         {
  65   2                time++;
  66   2                counter = 0;
  67   2         }
  68   1      }
  69          
  70          /*
  71           * str - pointer to string text (0 - 21 characters) to display
  72           * rowNum - row number of the screen (0 - 127)
  73           * fontScale - font scaler (1 - 4)
  74           */
  75          void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum, uint8_t fontSc
             -ale)
  76          {
  77   1        uint8_t i,j;
  78   1        for (i = 0; i < FONT_HEIGHT; i++)
  79   1        {
  80   2          RENDER_ClrLine(Line);
  81   2          RENDER_Large_StrLine(Line, 4, i, (SI_VARIABLE_SEGMENT_POINTER(, char, RENDER_STR_SEG))str, fontScale);
  82   2      
  83   2          for (j = 1; j < fontScale + 1; j++)
  84   2          {
  85   3            DISP_WriteLine(rowNum + (i * fontScale) + j, Line);
  86   3          }
  87   2        }
  88   1      }
  89          
  90          //adapts miliVolt2str from voltmeter.c to take in time integer counting in tenths of a second and converts
             - to string
  91          void secondsToStr(uint16_t time, char * str)
  92          {
  93   1        int8_t position = 6;
  94   1        uint8_t count = 0;
  95   1      
  96   1        // display backwards from s
  97   1        str[position--] = '\0';
  98   1        str[position--] = 's';
  99   1      
 100   1        for (; position >= 0; position--)
 101   1        {
 102   2          // count = 1 is the location of the decimal point
 103   2          if (count == 1)
 104   2          {
 105   3            str[position--] = '.';
C51 COMPILER V9.53.0.0   STOPWATCHPART                                                     04/24/2017 18:05:38 PAGE 3   

 106   3          }
 107   2              // Get the right-most digit from the number
 108   2              // and convert to ascii
 109   2              str[position] = (time % 10) + '0';
 110   2      
 111   2              // Shift number by 1 decimal place to the right
 112   2              time /= 10;
 113   2              count+=1;
 114   2        }
 115   1      }
 116          
 117          //sets up timer0 (off by default)
 118          void initTimer0()
 119          {
 120   1              uint8_t TCON_save;
 121   1              TCON_save = TCON;
 122   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 123   1              TH0 = 0xC0; //(0xC0 << TH0_TH0__SHIFT);
 124   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 125   1      
 126   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_48;
 127   1      
 128   1              TMOD = TMOD_T0M__MODE2 | TMOD_T1M__MODE0 | TMOD_CT0__TIMER
 129   1                                      | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 130   1      
 131   1              TCON |= TCON_TR0__RUN;
 132   1      
 133   1              IE_ET0 = 0;
 134   1      }
 135          
 136          //sets up BTN interrupts (on by default)
 137          void initBTNinterrupts(void)
 138          {
 139   1              IT01CF = IT01CF_IN0PL__ACTIVE_LOW | IT01CF_IN0SL__P0_2
 140   1                                      | IT01CF_IN1PL__ACTIVE_LOW | IT01CF_IN1SL__P0_3;
 141   1              IE_EX0 = 1;
 142   1              IE_EX1 = 1;
 143   1      }
 144          
 145          //draws main time underneath "STOPWATCH" title
 146          void drawTime()
 147          {
 148   1              secondsToStr(time, timeStr);
 149   1              drawScreenText(timeStr, 20, 1);
 150   1      }
 151          
 152          //draws a new lap if the lapnum (incremented by BTN1 interrupt does not match the current lap)
 153          void drawNewLap()
 154          {
 155   1              uint16_t temp_time;
 156   1              if(current != lapnum && lapnum<9){
 157   2                      Laps[current] = time;
 158   2                      if(current == 0){
 159   3                              drawScreenText("Lap Times:", 40, 1);
 160   3                              secondsToStr(time, timeStr);
 161   3                              drawScreenText(timeStr, 50, 1);
 162   3                      }else {
 163   3                              temp_time = Laps[current]-Laps[current-1];
 164   3                              secondsToStr(temp_time, timeStr);
 165   3                              drawScreenText(timeStr, 50+(8*current), 1);
 166   3                      }
 167   2                      current = lapnum;
 168   2              }
C51 COMPILER V9.53.0.0   STOPWATCHPART                                                     04/24/2017 18:05:38 PAGE 4   

 169   1      }
 170          
 171          //extern void lightStart(void); //assembly written function
 172          
 173          void Stopwatch(void)
 174          {
 175   1              initBTNinterrupts();
 176   1              initTimer0();
 177   1              initGlobals();
 178   1              drawScreenText("STOPWATCH", 0, 2);
 179   1              drawScreenText("DanP/ChrisE", 120, 1);
 180   1      
 181   1              while(1)
 182   1              {
 183   2                      drawTime();
 184   2                      drawNewLap();
 185   2      
 186   2                      if((start == 1) && (IE_EX0 == 0)){ //IF GOING FROM TIMER0 OFF -> TIMER0 ON
 187   3                              IE_ET0 = 0; //FORCE TIMER0 TO STOP DURING LIGHTS
 188   3                              //lightStart(); //STARTUP LIGHTS
 189   3                              IE_ET0 = 1; //ALLOW TIMER0 TO CONTINUE
 190   3                      }
 191   2      
 192   2                      if(BTN0 == 1) //BTN0 UNPRESSED
 193   2                              IE_EX0 = 1; //TURN BACK ON EXTERNAL (BTN) INTERRUPTS
 194   2                      if(BTN1 == 1)
 195   2                              IE_EX1 = 1;
 196   2              }
 197   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    595    ----
   CONSTANT SIZE    =    833    ----
   XDATA SIZE       =     32    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34      14
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
